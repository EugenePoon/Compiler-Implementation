%{
open AbstractSyntax

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名
// compose1 函数 取出 类型构造子 g，用类型复合机制构造类型。

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = ConstInt 10 //  \n 的 ASCII 码

// 取第一个，第二，第c三个数
let first  (a, _, _) = a
let second (_, b, _) = b
let third  (_, _, c) = c
%}

//增加float32，char类型 ,对应CSTFLOAT,CSTCHAR
%token <int> CSTINT CSTBOOL  // <int> 是词元的语义值类型
%token <float32> CSTFLOAT
%token <string> CSTSTRING NAME
%token <char> CSTCHAR
// %token SLEEP
// 增加FLOAT，SWITCH CASE FOR IN RANGE STRING DO
%token CHAR ELSE IF INT FLOAT STRING NULL PRINT PRINTLN RETURN VOID WHILE SWITCH CASE FOR IN RANGE DO SLEEP
// 异常处理
%token TRY CATCH THROW
// 结构体
%token STRUCT DOT

// 添加++，--
%token PLUS MINUS TIMES DIV MOD SELFPLUS SELFMINUS PLUSEQ MINUSEQ TIMESEQ DIVEQ MODEQ
%token EQ NE GT LT GE LE
%token NOT SEQOR SEQAND
// 左圆括号，右圆括号，左花括号，右花括号，左方括号，有方括号，分号，逗号，=，AMP，冒号
%token LPAR RPAR LBRACE RBRACE LBRACK RBRACK SEMI COMMA ASSIGN AMP COLON CONTINUE BREAK QUEST 
%token EOF

// 操作符 决定是左结合还是右结合，还有顺序
%right ASSIGN   //赋值          /* lowest precedence */  // 最下面的优先级最高
%nonassoc PRINT 
%right QUEST COLON
%left SEQOR                 //or 
%left SEQAND                //and
%left EQ NE                 //==
%nonassoc GT LT GE LE       //比较
%left PLUS MINUS            //+ - 
%left TIMES DIV MOD         //* / %
%left DOT
%nonassoc NOT AMP SELFPLUS SELFMINUS           //
%nonassoc LBRACK          /* highest precedence  */

%start Main            // 语法开始符号
%type <AbstractSyntax.Program> Main   // 开始符号，对应抽象语法树节点类型, program

%%

Main:
    TopDeclares EOF                     { Prog $1 }
;

TopDeclares:
    /* empty */                         { [] }
  | TopDeclare TopDeclares              { $1 :: $2 }
;

TopDeclare: 
    VariableDeclare SEMI                { VariableDeclare(fst $1, snd $1) }
  | VariableDeclareAndAssign SEMI       { VariableDeclareAndAssign(first $1, second $1 , third $1)  }
  | StructDeclare SEMI                  { StructDeclare(fst $1,snd $1) }
  | FunctionDeclare                     { $1 }
;

// structDeclare
//struct 'name' [MenberDefList]
StructDeclare:
  | STRUCT NAME LBRACE MemberDefList RBRACE         { ($2, $4) }
//  | STRUCT NAME LBRACE MemberDefList RBRACE NAME
;

MemberDefList:
    /* empty */ { [] }
    | VariableDeclare SEMI MemberDefList { $1 :: $3 }
;
// 声明
VariableDeclare:
    Type VariableDescribe                { ((fst $2) $1, snd $2 ) }
;
// 声明，将表达式赋值于变量 Var = Expr
VariableDeclareAndAssign:
    Type VariableDescribe ASSIGN Expr    { ((fst $2) $1, snd $2 , $4) }
;
/*
 变量描述
NAME  "n"   (fun t->t, "n") 返回一个元组，第一个元素，
是类型构造函数，在VariableDescribe 规则中使用
*/ 
// 具体描述
VariableDescribe: 
    // "i"    标识符                        fun t->t  id 函数
    NAME                                 { ((fun t -> t), $1)                      }
    // "*p"   指针标识符
    // let compose1 f (g, s) = ((fun x -> g(f(x))), s)
    //      compose1  (fun t -> TypP t) $2 ===  compose1 TypP $2 
    //       TypP 指针类型构造子 
  | TIMES VariableDescribe               { compose1 TypePoint $2                        }
  // (*p)   带括号的标识符
  | LPAR VariableDescribe RPAR           { $2                                      } 
  // ia[]   带方括号，无下标
  | VariableDescribe LBRACK RBRACK               { compose1 (fun t -> TypeArray(t, None)) $1    }
  // ia[10]   带方括号，带下标
  | VariableDescribe LBRACK CSTINT RBRACK        { compose1 (fun t -> TypeArray(t, Some $3)) $1 }
;

//FunctionDeclare
FunctionDeclare:
    //返回void函数 void '函数名' (参数列表) 函数块
    VOID NAME LPAR ParamDeclares RPAR Block { FunctionDeclare(None,     $2, $4, $6) }
    //返回type类型函数 type '函数名' (参数列表) 函数块
  | Type NAME LPAR ParamDeclares RPAR Block { FunctionDeclare(Some($1), $2, $4, $6) }
  // | VOID HELLO LPAR RPAR                    { FunctionDeclare() }
;
// 参数列表声明
ParamDeclares:
    /* empty */                         { [] }
  | ParamDeclaresNotEmpty               { $1 }
;
// 参数列表描述
// 变量
// 变量：参数声明非空
ParamDeclaresNotEmpty:
    VariableDeclare                                   { [$1]     }
  | VariableDeclare COMMA ParamDeclaresNotEmpty       { $1 :: $3 }
;
//花括号中的语句块 (语句与声明序列)
Block:
    LBRACE StmtOrDeclareSeq RBRACE          { Block $2 }
;

// 分别描述变量声明和变量声明赋值 
StmtOrDeclareSeq:
    /* empty */                         { [] }
  | Stmt StmtOrDeclareSeq                 { Statement $1 :: $2 }
  | VariableDeclare SEMI StmtOrDeclareSeq { Declare (fst $1, snd $1) :: $3 }
  | VariableDeclareAndAssign SEMI StmtOrDeclareSeq { DeclareAndAssign(first $1, second $1 , third $1) :: $3 }
;

Stmt: 
    StmtM                               { $1 }
  | StmtU                               { $1 }
;

StmtM:  /* No unbalanced if-else */
    Expr SEMI                           { Expression($1)       }    //expr;
  | RETURN SEMI                         { Return None          }    //return;
  | BREAK SEMI                          { Break                }    //break;
  | CONTINUE SEMI                       { Continue             }    //continue;
  | RETURN Expr SEMI                    { Return(Some($2))     }    //return Expr;
  | Block                               { $1                   }    //语句块
  | FOR LPAR Expr SEMI Expr SEMI Expr RPAR StmtM     { For($3,$5,$7,$9)  }  //for (Expr; Expr;Expr) stmtM
  | FOR Expr IN LPAR Expr RANGE Expr RPAR StmtM      { Range($2,$5,$7,$9)}  //for Expr in (Expr range expr) stmtM
  | IF LPAR Expr RPAR StmtM ELSE StmtM  { If($3, $5, $7)       }    //if(Expr) stmtM else stmtM
  | WHILE LPAR Expr RPAR StmtM          { While($3, $5)        }    //while (Expr) stmtM
  | DO StmtM WHILE LPAR Expr RPAR SEMI  { DoWhile($2, $5)      }    //Do stmt while(Expr);
  //switch (Expr){stmtCase}
  | SWITCH LPAR Expr RPAR LBRACE StmtCase RBRACE        { Switch($3,$6)  }        // (*casecase*)
  //try stmtM stmtCatch
  | TRY StmtM StmtCatch                 { Try($2,$3) }
  // sleep(2)
  | SLEEP LPAR Expr RPAR SEMI           { Sleep($3)}        
;
//switch-case中，case AtExprNotAccess:StmtM 
StmtCase:
    CASE AtExprNotAccess COLON StmtM               { [Case($2,$4)]    }  
  | CASE AtExprNotAccess COLON StmtM StmtCase      { Case($2,$4) :: $5}
;
//catch,捕捉异常，catch(Exception) stmtM
StmtCatch:
    CATCH LPAR EXCEPTION RPAR StmtM                { [Catch($3,$5)]     }
  | CATCH LPAR EXCEPTION RPAR StmtM StmtCatch      { Catch($3,$5) :: $6 }
;

EXCEPTION:
  CSTSTRING                                        { Exception $1 }
;

StmtU:
    IF LPAR Expr RPAR StmtM ELSE StmtU  { If($3, $5, $7)       } //if(Expr) stmtM else StmtU
  | IF LPAR Expr RPAR Stmt              { If($3, $5, Block []) } //if(Expr) stmt
  | WHILE LPAR Expr RPAR StmtU          { While($3, $5)        } //while(Expr) stmtU
  | DO StmtU WHILE LPAR Expr RPAR SEMI  { DoWhile($2, $5)      } //do StmtU while (Expr);
  // | SLEEP LPAR Expr RPAR SEMI           { Sleep($3)}
;

Expr: 
    Access                              { Access $1           }
  | ExprNotAccess                       { $1                  }
;

//表达式不能访问
ExprNotAccess:
    AtExprNotAccess                     { $1                  }
  | Access ASSIGN Expr                  { Assign($1, $3)      }
  | NAME LPAR Exprs RPAR                { CallOperator($1, $3)        }  
  | Expr QUEST Expr COLON Expr          { TernaryPrimitiveOperator($1,$3,$5)    }
  | NOT Expr                            { UnaryPrimitiveOperator("!", $2)      }
  | PRINT Expr                          { UnaryPrimitiveOperator("printi", $2) }
  | SLEEP Expr                          { UnaryPrimitiveOperator("sleep",$2)} 
  | Expr SELFPLUS                       { UnaryPrimitiveOperator("I++", $1)     }
  | Expr SELFMINUS                      { UnaryPrimitiveOperator("I--", $1)     }
  | SELFPLUS Expr                       { UnaryPrimitiveOperator("++I", $2)     }
  | SELFMINUS  Expr                     { UnaryPrimitiveOperator("--I", $2)     }
  | PRINTLN                             { UnaryPrimitiveOperator("printc", nl) }
  | Expr PLUS  Expr                     { BinaryPrimitiveOperator("+",  $1, $3) }
  | Access PLUSEQ Expr                    {  AssignThird("+=",$1,$3)}
  | Access MINUSEQ Expr                   {  AssignThird("-=",$1,$3)}
  | Access TIMESEQ Expr                   {  AssignThird("*=",$1,$3)}
  | Access DIVEQ Expr                     {  AssignThird("/=",$1,$3)}
  | Access MODEQ Expr                     {  AssignThird("%=",$1,$3)}
  | Expr MINUS Expr                     { BinaryPrimitiveOperator("-",  $1, $3) }
  | Expr TIMES Expr                     { BinaryPrimitiveOperator("*",  $1, $3) }
  | Expr DIV   Expr                     { BinaryPrimitiveOperator("/",  $1, $3) }
  | Expr MOD   Expr                     { BinaryPrimitiveOperator("%",  $1, $3) }
  | Expr EQ    Expr                     { BinaryPrimitiveOperator("==", $1, $3) }
  | Expr NE    Expr                     { BinaryPrimitiveOperator("!=", $1, $3) }
  | Expr GT    Expr                     { BinaryPrimitiveOperator(">",  $1, $3) }
  | Expr LT    Expr                     { BinaryPrimitiveOperator("<",  $1, $3) }
  | Expr GE    Expr                     { BinaryPrimitiveOperator(">=", $1, $3) }
  | Expr LE    Expr                     { BinaryPrimitiveOperator("<=", $1, $3) }
  | Expr SEQAND Expr                    { AndOperator($1, $3)     }
  | Expr SEQOR  Expr                    { OrOperator($1, $3)      }
;

AtExprNotAccess:
    Const                               { ConstInt $1             }
  | ConstString                         { ConstString($1)         }
  | ConstFloat                          { ConstFloat($1)          }
  | ConstChar                           { ConstChar($1)          }
  | LPAR ExprNotAccess RPAR             { $2                      } 
  | AMP Access                          { Address $2              }
; 

Access:
    NAME                                { AccessVariable $1           }
  | LPAR Access RPAR                    { $2                  }  
  | TIMES Access                        { AccessDeclareReference (Access $2)}
  | TIMES AtExprNotAccess               { AccessDeclareReference $2         }
  | Access LBRACK Expr RBRACK           { AccessIndex($1, $3)    }   
  | NAME DOT NAME                       { AccessMember(AccessVariable $1, AccessVariable $3)}
;

Exprs:
    /* empty */                         { []       }
  | Exprs1                              { $1       }
;

Exprs1:
    Expr                                { [$1]     }
  | Expr COMMA Exprs1                   { $1 :: $3 }
;

Const:
    CSTINT                              { $1       }
  | CSTBOOL                             { $1       }
  | MINUS CSTINT                        { - $2     }
  | NULL                                { -1       }
;
ConstString:
  CSTSTRING                             { $1       }
;

ConstFloat:
    CSTFLOAT                            { $1       }
  | MINUS CSTFLOAT                      { - $2     }

ConstChar:
  CSTCHAR                               { $1       }


Type:
    INT                                 { TypeInt      }
  | CHAR                                { TypeChar     }
  | STRING                              { TypeString   }
  | FLOAT                               { TypeFloat    }
  | STRUCT  NAME                        { TypeStruct($2) }
;

